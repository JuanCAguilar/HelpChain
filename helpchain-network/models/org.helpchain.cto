/**
 * Write your model definitions here
 */

namespace org.helpchain



//Enumeraciones y conceptos



//Tipos de personas
enum TipoPers{
  o FISICA
  o MORAL
}

//Tipos de reguladores
enum TipoReg{
  o GOBIERNO
  o ENTIDAD
}

//Tipo de Solicitante
enum TipoSol{
  o INDIVIDUAL
  o COMUNIDAD
  o ORGANIZACION
}

//Tipos de causas a tratar
enum Causa{
  o DESASTRES
  o VIVIENDAS
  o EDUCACION
  o SALUD
}

//Distintos estados que puede tener un donativo
enum EstadoDonativo{
  o POR_ASIGNAR
  o POR_ENTREGAR
  o ENTREGADOS
  o POR_REUTILIZAR
}

//Distintos estados que puede tener una cadena
enum EstadoProyecto{
  o EN_REVISION
  o VALIDA
  o ACTIVA
  o COMPLETADA
  o ROTA
}

//Estado de la cadena dependiendo del cumplimiento del solicitante
enum EstadoCumplimiento{
  o VERDE
  o AMARILLO
  o ROJO
}


//Regla general para una meta. Primer eslabon no puede superar el mes ni el 50% de la recaudacion 
abstract concept Meta{
  o Integer duracionPrimerEslabon default=1 range=[1,30]
  o Integer porcentajePrimerEslabon default=10 range=[10,50]
}

//Opciones de meta corta.
//Tiempo min: 1 Dia + Primer Eslabon [1,30]
//Tiempo max: 2 meses
concept MetaCorta extends Meta{
  o Integer duracionEslabones default=1 range=[1,30]
  o Integer numEslabones default=1 range=[1,2]
  o Integer porcentajeEslabon default=90 range=[0,90]
}

//Opciones de meta larga
concept MetaLarga extends Meta{
  o Integer duracionEslabones default=1 range=[1,60]
  o Integer numEslabones default=3 range=[3,5]
  o Integer porcentajeEslabon default=30 range=[0,30]
}

//Componentes de un eslabon que conforman una cadena
concept Eslabon {
  o EstadoCumplimiento estCump
  o DateTime fechaInicio optional //Se colocan opcionales para ser insertados
  o DateTime fechaFin optional    //despues y no al inicio
  o Double montoMeta
  o Double recaudacion
}



//Activos

//Componentes de una donacion realizada por parte de un aportante hacia un proyecto
asset Donativo identified by donativoID {
  o String donativoID
  o Double monto
  o EstadoDonativo estado
  --> Usuario aportante
  --> Proyecto proyecto
}

//Componentes de un proyecto generado por un solicitante para recaudar dinero
asset Proyecto identified by pID {
  o String pID
  o String nombre
  o Causa causa
  o Meta meta
  o Eslabon[] cadena  optional  //Se necesita validar para que se de inicio a la cadena
  o Double MontoMetaTotal  //La cantidad de dinero total que necesita recaudar
  o EstadoProyecto eP
  o DateTime fechaInicio 
  --> Usuario solicitante
  --> Operador operadorAsignado
}


//Participantes


abstract participant User{
  o String nombre
  o String alias optional
}

participant Usuario identified by userID extends User{
  o String userID

  //El lado del aportante
  o TipoPers tipo   //No se si siga aplicando
  o Boolean recibo
  o Double Saldo
  o Donativo[] donaciones
  o Double MontoDonadoHistorico
  o Double MontoAsignadoHistorico

  //El lado del solicitante
  o TipoSol tipoSol //Quiza se podria fusionar TipoPers Y TipoSol
  o Proyecto[] proyectos
  o Double MontoRecibidoHistorico

}

participant Regulador identified by reguladorID extends User{
  o String reguladorID
  o TipoReg tipo
  }

participant Operador identified by operadorID extends User{
  o String operadorID
  o 
}

//Antigua Separacion
/*
participant Aportante identified by aportanteID {
  o String aportanteID
  o TipoPers tipo
  o Boolean recibo
  o Double Saldo
  o Donativo[] donaciones
}

participant Solicitante identified by solicitanteID{
  o String solicitanteID

}
*/



//Transacciones


abstract transaction transferencia {
  o String usuarioID
}

transaction CrearSolicitud extends transferencia{
  o Causa causa
  --> Usuario solicitante
}

transaction Donar extends transferencia{
  o Double monto
  --> Usuario aportante
  --> Proyecto proyecto
}

transaction AgregarSaldo extends transferencia{
    o Double saldo
  --> Usuario aportante
}

transaction ValidarProyecto extends transferencia {
  --> Usuario solicitante
  --> Operador operador
}



//Eventos


event getSolicitud {
  o String detail
}

event getDonacion {
  o String detail
}

event getSaldo {
  o String detail
}



















//Autogenerado


participant SampleParticipant identified by participantId {
  o String participantId
  o String firstName
  o String lastName
}

asset SampleAsset identified by assetId {
  o String assetId
  --> SampleParticipant owner
  o String value
}

transaction SampleTransaction {
  --> SampleAsset asset
  o String newValue
}

event SampleEvent {
  --> SampleAsset asset
  o String oldValue
  o String newValue
}
